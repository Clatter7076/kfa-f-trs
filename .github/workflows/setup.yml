name: Setup and Automate Browser Operations

on:
  push:
    branches:
      - main

jobs:
  setup-and-launch:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Install System Dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            x11vnc \
            xvfb \
            unzip \
            curl \
            wget \
            gnupg \
            libxss1 \
            libnss3 \
            libgbm-dev \
            libasound2

      # 3. Install Cloudflared
      - name: Install Cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      # 4. Set up Cloudflare credentials
      - name: Setup Cloudflare Credentials
        run: |
          mkdir -p ~/.cloudflared
          echo "${{ secrets.CLOUDFLARE_CERT_PEM }}" > ~/.cloudflared/cert.pem
          chmod 600 ~/.cloudflared/cert.pem

      # 5. Start Xvfb and x11vnc
      - name: Start Virtual Display and VNC
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 &
          x11vnc -display :99 -N -forever -shared &
          sleep 5

      # 6. Extract Edge Profile
      - name: Extract Edge Profile
        env:
          BRAVE_ZIP_PASSWORD: ${{ secrets.BRAVE_ZIP_PASSWORD }}
        run: |
          rm -rf ~/.config/microsoft-edge
          mkdir -p ~/.config/microsoft-edge
          7z x edge_data.zip -o~/.config/microsoft-edge -p"$BRAVE_ZIP_PASSWORD"

      # 7. Configure Edge Policies
      - name: Configure Edge Policies
        run: |
          sudo mkdir -p /etc/opt/edge/policies/managed
          sudo tee /etc/opt/edge/policies/managed/policy.json > /dev/null << 'EOL'
          {
            "EdgeCollectionsEnabled": false,
            "EdgeShoppingAssistantEnabled": false,
            "ShowMicrosoftRewards": false,
            "ShowRecommendationsEnabled": false,
            "EdgeFeedbackEnabled": false,
            "AutofillAddressEnabled": false,
            "AutofillCreditCardEnabled": false,
            "PasswordManagerEnabled": false,
            "SmartScreenEnabled": false,
            "ExperimentationAndConfigurationServiceControl": {
              "no-reports": true
            },
            "BackgroundModeEnabled": false,
            "MetricsReportingEnabled": false,
            "SearchSuggestEnabled": false,
            "AlternateErrorPagesEnabled": false,
            "BuiltInDnsClientEnabled": false,
            "EdgeEnhanceImagesEnabled": false,
            "EdgePdfOcrEnabled": false,
            "NetworkPredictionOptions": 2,
            "PaymentMethodQueryEnabled": false,
            "SpellcheckEnabled": false,
            "SyncDisabled": true,
            "TranslateEnabled": false
          }
          EOL

      # 8. Launch Edge Browser
      - name: Launch Edge Browser
        env:
          DISPLAY: :99
        run: |
          microsoft-edge \
            --no-sandbox \
            --disable-features=ExtensionsToolbarMenu \
            --disable-extensions-http-throttling \
            --disable-popup-blocking \
            --no-default-browser-check \
            --no-first-run \
            --disable-background-mode \
            --disable-component-update \
            --disable-sync \
            --disable-metrics \
            --disable-breakpad \
            --disable-crash-reporter \
            --disable-domain-reliability \
            "${{ secrets.SECRET_URL }}" &
          
          sleep 5

      # 9. Manage Cloudflared Tunnel
      - name: Manage Cloudflared Tunnel
        run: |
          TUNNEL_NAME="github-actions-tunnel"
          HOSTNAME="${{ secrets.VNC_HOSTNAME }}"

          EXISTING_TUNNEL=$(cloudflared tunnel list | grep "$TUNNEL_NAME" || true)
          if [ -n "$EXISTING_TUNNEL" ]; then
            TUNNEL_ID=$(echo "$EXISTING_TUNNEL" | awk '{print $1}')
            echo "Existing tunnel: $TUNNEL_ID. Deleting..."
            cloudflared tunnel delete "$TUNNEL_ID"
          fi

          cloudflared tunnel create "$TUNNEL_NAME"
          TUNNEL_ID=$(cloudflared tunnel list | grep "$TUNNEL_NAME" | awk '{print $1}')

          mkdir -p ~/.cloudflared
          cat <<EOL > ~/.cloudflared/config.yml
          tunnel: $TUNNEL_ID
          credentials-file: /home/runner/.cloudflared/$TUNNEL_ID.json
          
          ingress:
            - hostname: "$HOSTNAME"
              service: tcp://localhost:5900
            - service: http_status:404
          EOL

          cloudflared tunnel route dns --overwrite-dns "$TUNNEL_NAME" "$HOSTNAME"

      # 10. Start Cloudflared
      - name: Start Cloudflared
        run: |
          nohup cloudflared tunnel --config ~/.cloudflared/config.yml run "github-actions-tunnel" &
          sleep 10

      # 11. Keep the container running
      - name: Keep Service Running
        run: |
          echo "Workflow complete; keeping container alive..."
          while true; do sleep 1000; done
