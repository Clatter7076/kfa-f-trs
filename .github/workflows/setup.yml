name: Setup and Automate Browser Operations

on:
  push:
    branches:
      - main

jobs:
  setup-and-launch:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      # 1. Check out repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. Install System Dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            x11vnc \
            xvfb \
            unzip \
            curl \
            wget \
            gnupg \
            libxss1 \
            libnss3 \
            libgbm-dev \
            libasound2

      # 4. Install Python Packages and Playwright
      - name: Install Python Packages
        run: |
          python -m pip install --upgrade pip
          pip install pytest-playwright pyotp amazoncaptcha requests Pillow
          playwright install chromium
          playwright install-deps

      # 5. Install Cloudflared
      - name: Install Cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      # 6. Set up Cloudflare credentials
      - name: Setup Cloudflare Credentials
        run: |
          mkdir -p ~/.cloudflared
          echo "${{ secrets.CLOUDFLARE_CERT_PEM }}" > ~/.cloudflared/cert.pem
          chmod 600 ~/.cloudflared/cert.pem

      # 7. Start Xvfb and x11vnc
      - name: Start Virtual Display and VNC
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 &
          x11vnc -display :99 -N -forever -shared &
          sleep 5

      # 8. Download Violentmonkey Extension
      - name: Download Violentmonkey
        run: |
          mkdir -p /tmp/extensions
          wget -O /tmp/extensions/violentmonkey.crx \
            "https://clients2.google.com/service/update2/crx?response=redirect&acceptformat=crx2,crx3&prodversion=100&x=id%3Djinjaccalgkegednnccohejagnlnfdag%26installsource%3Dondemand%26uc"
          # Extract the CRX to a folder (required by Playwright)
          cd /tmp/extensions && python ${{ github.workspace }}/uncrx.py violentmonkey.crx

      # Operation UndeadV2
      - name: Operation UndeadV2
        run: |
          sudo mkdir -p /etc/chromium-browser/policies/managed/
          echo '{ "ExtensionManifestV2Availability": 2 }' | sudo tee -a /etc/chromium-browser/policies/managed/ExtensionManifestV2Availability.json

      # 9. Serve user.js Locally
      - name: Serve user.js Locally
        env:
          USER_JS: ${{ secrets.USER_JS }}
        run: |
          echo "$USER_JS" > user.js
          python3 -m http.server 8000 &
          sleep 2
          curl -f http://localhost:8000/user.js || exit 1

      # 10. Automate with Playwright
      - name: Install user.js via Violentmonkey
        env:
          AZ_COOKIES: ${{ secrets.AZ_COOKIES }}
          DISPLAY: :99
        run: |
          cat <<EOF > automate_browser.py
          import time
          import json
          import os
          import requests
          from playwright.sync_api import sync_playwright

          def verify_local_server():
              try:
                  response = requests.get('http://localhost:8000/user.js')
                  response.raise_for_status()
                  print("Local server is running and user.js is accessible")
                  return True
              except Exception as e:
                  print(f"Error accessing local server: {e}")
                  return False

          def main():
              secret_url = "${{ secrets.SECRET_URL }}"
              
              # Verify local server first
              if not verify_local_server():
                  print("Cannot proceed: Local server is not accessible")
                  return
              
              # Get cookies from environment variable
              cookies_json = os.getenv('AZ_COOKIES')
              if not cookies_json:
                  print("Error: No cookies found in environment variables")
                  return
                  
              try:
                  cookies = json.loads(cookies_json)
              except json.JSONDecodeError as e:
                  print(f"Error parsing cookies JSON: {e}")
                  return
          
              with sync_playwright() as p:
                  # Launch browser with existing user data directory
                  context = p.chromium.launch_persistent_context(
                      user_data_dir="/tmp/chrome-data",
                      headless=False,
                      args=[
                          "--no-sandbox",
                          "--start-maximized",
                          "--disable-dev-shm-usage",
                          "--load-extension=/tmp/extensions/violentmonkey",
                          "--enable-extensions",
                          "--extensions-on-chrome-urls",
                          "--disable-extensions-http-throttling",
                          "--enable-chrome-browser-cloud-management",
                          "--extensions-install-verification",
                          "--enable-manual-extension-installation",
                          "--force-dev-mode-highlighting",
                          "--force-fieldtrials=ExtensionDeveloperModeWarning/None/"
                      ],
                      viewport={"width": 1920, "height": 1080}
                  )
                  
                  page = context.new_page()
                  
                  # Add cookies before navigating to the site
                  try:
                      context.add_cookies(cookies)
                      print("Added authentication cookies")
                  except Exception as e:
                      print(f"Error adding cookies: {e}")
                      context.close()
                      return
                  
                  # Navigate to secret URL
                  print("Navigating to target URL...")
                  page.goto(secret_url)
                  time.sleep(3)  # Wait for page to load
                  
                  # Verify we're logged in
                  sign_in_button = page.locator("#item_secondary_nav_button_sign_in")
                  if sign_in_button.is_visible():
                      print("Error: Not logged in. Cookie authentication failed.")
                      context.close()
                      return
                      
                  print("Successfully logged in with cookies")
                  
                  # Open user.js in new tab to install script
                  try:
                      install_page = context.new_page()
                      print("Attempting to load user.js...")
                      response = install_page.goto("http://localhost:8000/user.js", wait_until="domcontentloaded")
                      
                      if response and response.ok:
                          print("Successfully loaded user.js")
                          install_button = install_page.wait_for_selector("xpath=//button[contains(text(), 'Install')]", timeout=10000)
                          if install_button:
                              install_button.click()
                              print("Clicked install button")
                              time.sleep(2)
                          else:
                              print("Install button not found")
                      else:
                          print(f"Failed to load user.js: {response.status if response else 'No response'}")
                      
                      install_page.close()
                  except Exception as e:
                      print(f"Error during script installation: {e}")
                      
                  # Refresh main page
                  page.bring_to_front()
                  page.reload()
                  time.sleep(3)
          
                  print("Workflow completed.")
                  context.close()
          
          if __name__ == "__main__":
              main()
          EOF

          python3 automate_browser.py

      # 11. Setup Browser with Extensions and Cookies
      - name: Setup Browsers
        env:
          AZ_COOKIES: ${{ secrets.AZ_COOKIES }}
          DISPLAY: :99
        run: |
          # Create a cookies file for Chromium
          echo "$AZ_COOKIES" > /tmp/cookies.json
          
          # Launch Chromium with cookies and extensions
          chromium \
            --no-sandbox \
            --user-data-dir=/tmp/chrome-data \
            --load-extension=/tmp/extensions/violentmonkey \
            --password-store=basic \
            --enable-extensions \
            --force-fieldtrials=ExtensionDeveloperModeWarning/None/ \
            --extensions-on-chrome-urls \
            --disable-extensions-http-throttling \
            --enable-chrome-browser-cloud-management \
            --extensions-install-verification \
            --enable-manual-extension-installation \
            --force-dev-mode-highlighting \
            "${{ secrets.SECRET_URL }}" &
          
          # Wait for browser to start
          sleep 5


      # 12. Manage Cloudflared Tunnel
      - name: Manage Cloudflared Tunnel
        run: |
          TUNNEL_NAME="github-actions-tunnel"
          HOSTNAME="${{ secrets.VNC_HOSTNAME }}"

          EXISTING_TUNNEL=$(cloudflared tunnel list | grep "$TUNNEL_NAME" || true)
          if [ -n "$EXISTING_TUNNEL" ]; then
            TUNNEL_ID=$(echo "$EXISTING_TUNNEL" | awk '{print $1}')
            echo "Existing tunnel: $TUNNEL_ID. Deleting..."
            cloudflared tunnel delete "$TUNNEL_ID"
          fi

          # Create new Cloudflare tunnel
          cloudflared tunnel create "$TUNNEL_NAME"
          TUNNEL_ID=$(cloudflared tunnel list | grep "$TUNNEL_NAME" | awk '{print $1}')

          mkdir -p ~/.cloudflared
          cat <<EOL > ~/.cloudflared/config.yml
          tunnel: $TUNNEL_ID
          credentials-file: /home/runner/.cloudflared/$TUNNEL_ID.json
          
          ingress:
            - hostname: "$HOSTNAME"
              service: tcp://localhost:5900
            - service: http_status:404
          EOL

          cloudflared tunnel route dns --overwrite-dns "$TUNNEL_NAME" "$HOSTNAME"

      # 13. Start Cloudflared
      - name: Start Cloudflared
        run: |
          nohup cloudflared tunnel --config ~/.cloudflared/config.yml run "github-actions-tunnel" &
          sleep 10

      # 14. Keep the container running
      - name: Keep Service Running
        run: |
          echo "Workflow complete; keeping container alive..."
          while true; do sleep 1000; done
