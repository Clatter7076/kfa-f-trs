name: Setup
on:
  push:

jobs:
  setup-and-launch:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the main repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true

      # Step 2: Install necessary dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y x11vnc xvfb unzip 7zip

      # Step 3: Install Brave Browser
      - name: Install Brave Browser
        run: |
          sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser-release.list
          sudo apt-get update
          sudo apt-get install -y brave-browser

      # Step 6: Install Cloudflared
      - name: Install Cloudflared
        run: |
          sudo wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      # Step 7: Setup Cloudflare Credentials
      - name: Setup Cloudflare Credentials
        run: |
          mkdir -p ~/.cloudflared
          echo "${{ secrets.CLOUDFLARE_CERT_PEM }}" > ~/.cloudflared/cert.pem
          chmod 600 ~/.cloudflared/cert.pem

      # Step 8: Start Xvfb
      - name: Start Xvfb
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x16 &

      # Step 9: Start x11vnc
      - name: Start x11vnc
        run: |
          export DISPLAY=:99
          x11vnc -display :99 -N -forever -shared &

      # Step 10: Create or Modify GroupPolicy.json for Brave
      - name: Create or Modify GroupPolicy.json
        run: |
          sudo mkdir -p /etc/brave/policies/managed
          echo '{
            "ExtensionSettings": {
              "*": {
                "installation_mode": "blocked"
              },
              "cjpalhdlnbpafiamejdnhcphjbkeiagm": {
                "installation_mode": "force_installed",
                "update_url": "https://clients2.google.com/service/update2/crx"
              },
              "jinjaccalgkegednnccohejagnlnfdag": {
                "installation_mode": "force_installed",
                "update_url": "https://clients2.google.com/service/update2/crx"
              }
            },
            "TorDisabled": true,
            "BraveVPNDisabled": true,
            "BraveRewardsDisabled": true,
            "BraveWalletDisabled": true,
            "BinanceWidgetDisabled": true,
            "BraveTalkDisabled": true,
            "BraveNewsDisabled": true,
            "MetricsReportingEnabled": false,
            "SpeedreaderEnabled": false,
            "BraveShieldsEnabled": true,
            "DefaultBrowserSettingEnabled": false,
            "HomepageIsNewTabPage": true,
            "NewTabPageLocation": "chrome://newtab"
          }' | sudo tee /etc/brave/policies/managed/GroupPolicy.json

      # Step 11: Launch Brave Browser
      - name: Launch Brave Browser
        run: |
          export DISPLAY=:99
          nohup brave-browser --no-sandbox "${{ secrets.SECRET_URL }}" &

      # Step 12: Check, Delete Existing Tunnel, Create New Tunnel, and Route DNS
      - name: Check, Delete Existing Tunnel, Create New Tunnel, and Route DNS
        run: |
          # Define tunnel name and hostname from secrets
          TUNNEL_NAME="github-actions-tunnel"
          HOSTNAME="${{ secrets.VNC_HOSTNAME }}"

          # Check if the tunnel already exists
          EXISTING_TUNNEL=$(cloudflared tunnel list | grep "$TUNNEL_NAME" || true)

          if [ -n "$EXISTING_TUNNEL" ]; then
            # Delete the existing tunnel
            TUNNEL_ID=$(echo "$EXISTING_TUNNEL" | awk '{print $1}')
            echo "Tunnel exists. Deleting tunnel with ID: $TUNNEL_ID..."
            cloudflared tunnel delete "$TUNNEL_ID"
            echo "Tunnel deleted."
          fi

          # Create a new tunnel
          echo "Creating a new tunnel..."
          cloudflared tunnel create "$TUNNEL_NAME"
          TUNNEL_ID=$(cloudflared tunnel list | grep "$TUNNEL_NAME" | awk '{print $1}')
          echo "Tunnel ID: $TUNNEL_ID"

          # Create config.yml using multiple echo statements for proper indentation
          mkdir -p ~/.cloudflared
          {
            echo "tunnel: $TUNNEL_ID"
            echo "credentials-file: /home/runner/.cloudflared/$TUNNEL_ID.json"
            echo ""
            echo "ingress:"
            echo "  - hostname: \"$HOSTNAME\""
            echo "    service: tcp://localhost:5900"
            echo "  - service: http_status:404"
          } > ~/.cloudflared/config.yml

          echo "Cloudflare tunnel configuration created."

          # Route the tunnel to your custom domain using Cloudflared CLI with --overwrite-dns option
          echo "Routing tunnel to your custom domain..."
          cloudflared tunnel route dns --overwrite-dns "$TUNNEL_NAME" "$HOSTNAME"
          echo "DNS record created successfully."

      # Step 13: Start Cloudflared Tunnel
      - name: Start Cloudflared Tunnel
        run: |
          nohup cloudflared tunnel --config ~/.cloudflared/config.yml run github-actions-tunnel &
          sleep 10  # Allow time for the tunnel to establish

      # Step 13: Keep Services Running Indefinitely
      - name: Keep Services Running
        run: |
          while true; do sleep 1000; done
