name: Setup and Automate Browser Operations

on:
  push:
    branches:
      - main

jobs:
  setup-and-launch:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. Install System Dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            x11vnc \
            xvfb \
            unzip \
            curl \
            wget \
            gnupg \
            libxss1 \
            libnss3 \
            libgbm-dev \
            libasound2

      # 4. Install Python Packages and Playwright
      - name: Install Python Packages
        run: |
          python -m pip install --upgrade pip
          pip install pytest-playwright pyotp requests Pillow
          playwright install chromium
          playwright install-deps

      # 5. Install Cloudflared
      - name: Install Cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      # 6. Set up Cloudflare credentials
      - name: Setup Cloudflare Credentials
        run: |
          mkdir -p ~/.cloudflared
          echo "${{ secrets.CLOUDFLARE_CERT_PEM }}" > ~/.cloudflared/cert.pem
          chmod 600 ~/.cloudflared/cert.pem

      # 7. Start Xvfb and x11vnc
      - name: Start Virtual Display and VNC
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 &
          x11vnc -display :99 -N -forever -shared &
          sleep 5

      # 8. Configure Edge and Extensions
      - name: Configure Edge Policies
        run: |
          sudo mkdir -p /etc/opt/edge/policies/managed
          sudo tee /etc/opt/edge/policies/managed/policy.json > /dev/null <<EOL
          {
            "ExtensionInstallForcelist": [
              "jinjaccalgkegednnccohejagnlnfdag;https://clients2.google.com/service/update2/crx",
              "hlkenndednhfkekhgcdicdfddnkalmdm;https://clients2.google.com/service/update2/crx"
            ],
            "ExtensionInstallAllowlist": ["*"],
            "ExtensionManifestV2Availability": 2,
            "ExtensionsOnEdgeAdditionsEnabled": true,
            "DeveloperToolsAvailability": 1,
            "EdgeCollectionsEnabled": false,
            "EdgeShoppingAssistantEnabled": false,
            "ShowMicrosoftRewards": false,
            "ShowRecommendationsEnabled": false,
            "EdgeFeedbackEnabled": false,
            "AutofillAddressEnabled": false,
            "AutofillCreditCardEnabled": false,
            "PasswordManagerEnabled": false,
            "SmartScreenEnabled": false,
            "ExperimentationAndConfigurationServiceControl": {
              "no-reports": true
            }
          }
          EOL

      # 9. Serve userscript Locally
      - name: Serve Userscript Locally
        env:
          USER_JS: ${{ secrets.USER_JS }}
        run: |
          echo "$USER_JS" > main.user.js
          python3 -m http.server 8000 &
          sleep 2
          curl -f http://localhost:8000/main.user.js || exit 1

      # 10. Automate with Playwright
      - name: Install userscript via Violentmonkey
        env:
          AZ_COOKIES: ${{ secrets.AZ_COOKIES }}
          DISPLAY: :99
        run: |
          cat <<EOF > automate_browser.py
          import time
          import json
          import os
          import requests
          from playwright.sync_api import sync_playwright

          def verify_local_server():
              try:
                  response = requests.get('http://localhost:8000/main.user.js')
                  response.raise_for_status()
                  print("Local server is running and main.user.js is accessible")
                  return True
              except Exception as e:
                  print(f"Error accessing local server: {e}")
                  return False

          def wait_for_extension(page, extension_id):
              max_attempts = 30
              attempt = 0
              while attempt < max_attempts:
                  try:
                      response = page.goto(f"chrome-extension://{extension_id}/popup.html")
                      if response and response.ok:
                          print(f"Extension {extension_id} is ready")
                          return True
                  except:
                      pass
                  print(f"Waiting for extension {extension_id}... ({attempt + 1}/{max_attempts})")
                  time.sleep(2)
                  attempt += 1
              return False

          def main():
              secret_url = "${{ secrets.SECRET_URL }}"
              
              if not verify_local_server():
                  print("Cannot proceed: Local server is not accessible")
                  return
              
              cookies_json = os.getenv('AZ_COOKIES')
              if not cookies_json:
                  print("Error: No cookies found in environment variables")
                  return
                  
              try:
                  cookies = json.loads(cookies_json)
                  if not isinstance(cookies, list):
                      print("Error: Cookies must be a list of cookie objects")
                      return
              except json.JSONDecodeError as e:
                  print(f"Error parsing cookies JSON: {e}")
                  return
          
              with sync_playwright() as p:
                  context = p.chromium.launch_persistent_context(
                      user_data_dir="/tmp/edge-data",
                      channel="msedge",
                      headless=False,
                      args=[
                          "--no-sandbox",
                          "--start-maximized",
                          "--disable-dev-shm-usage",
                          "--disable-features=ExtensionsToolbarMenu",
                          "--disable-extensions-http-throttling",
                          "--disable-popup-blocking",
                          "--no-default-browser-check",
                          "--no-first-run"
                      ],
                      viewport={"width": 1920, "height": 1080}
                  )
                  
                  page = context.new_page()
                  
                  # Wait for Cookie-Editor extension
                  cookie_editor_id = "hlkenndednhfkekhgcdicdfddnkalmdm"
                  if not wait_for_extension(page, cookie_editor_id):
                      print("Cookie-Editor extension not ready")
                      context.close()
                      return
                      
                  # Import cookies using Cookie-Editor
                  print("Importing cookies via Cookie-Editor...")
                  page.goto(secret_url)
                  page.keyboard.press("Alt+Shift+C")  # Open Cookie-Editor
                  time.sleep(1)
                  
                  # Click Import button and paste cookies
                  import_button = page.get_by_role("button", name="Import")
                  if import_button.is_visible():
                      import_button.click()
                      page.keyboard.type(cookies_json)
                      page.keyboard.press("Enter")
                      print("Cookies imported via Cookie-Editor")
                  
                  # Reload page to apply cookies
                  page.reload()
                  time.sleep(3)
                  
                  if page.locator("#item_secondary_nav_button_sign_in").is_visible():
                      print("Error: Not logged in. Cookie authentication failed.")
                      context.close()
                      return
                      
                  print("Successfully logged in with cookies")
                  
                  # Wait for Violentmonkey extension
                  violentmonkey_id = "jinjaccalgkegednnccohejagnlnfdag"
                  if not wait_for_extension(page, violentmonkey_id):
                      print("Violentmonkey extension not ready")
                      context.close()
                      return
                  
                  try:
                      install_page = context.new_page()
                      print("Loading main.user.js...")
                      response = install_page.goto("http://localhost:8000/main.user.js", wait_until="domcontentloaded")
                      
                      if response and response.ok:
                          print("Successfully loaded main.user.js")
                          install_button = install_page.wait_for_selector("xpath=//button[contains(text(), 'Install')]", timeout=10000)
                          if install_button:
                              install_button.click()
                              print("Clicked install button")
                              time.sleep(2)
                              
                              # Look for confirmation button if needed
                              confirm_button = install_page.get_by_role("button", name="OK", exact=True)
                              if confirm_button.is_visible():
                                  confirm_button.click()
                                  print("Clicked confirmation button")
                          else:
                              print("Install button not found")
                      else:
                          print(f"Failed to load main.user.js: {response.status if response else 'No response'}")
                      
                      install_page.close()
                  except Exception as e:
                      print(f"Error during script installation: {e}")
                      
                  page.bring_to_front()
                  page.reload()
                  time.sleep(3)
          
                  print("Automation completed.")
                  context.close()
          
          if __name__ == "__main__":
              main()
          EOF

          python3 automate_browser.py

      # 11. Launch Edge for VNC Access
      - name: Launch Edge Browser
        env:
          AZ_COOKIES: ${{ secrets.AZ_COOKIES }}
          DISPLAY: :99
        run: |
          # Launch Edge
          microsoft-edge \
            --no-sandbox \
            --user-data-dir=/tmp/edge-data \
            --disable-features=ExtensionsToolbarMenu \
            --disable-extensions-http-throttling \
            --disable-popup-blocking \
            --no-default-browser-check \
            --no-first-run \
            "${{ secrets.SECRET_URL }}" &
          
          sleep 5

      # 12. Manage Cloudflared Tunnel
      - name: Manage Cloudflared Tunnel
        run: |
          TUNNEL_NAME="github-actions-tunnel"
          HOSTNAME="${{ secrets.VNC_HOSTNAME }}"

          EXISTING_TUNNEL=$(cloudflared tunnel list | grep "$TUNNEL_NAME" || true)
          if [ -n "$EXISTING_TUNNEL" ]; then
            TUNNEL_ID=$(echo "$EXISTING_TUNNEL" | awk '{print $1}')
            echo "Existing tunnel: $TUNNEL_ID. Deleting..."
            cloudflared tunnel delete "$TUNNEL_ID"
          fi

          cloudflared tunnel create "$TUNNEL_NAME"
          TUNNEL_ID=$(cloudflared tunnel list | grep "$TUNNEL_NAME" | awk '{print $1}')

          mkdir -p ~/.cloudflared
          cat <<EOL > ~/.cloudflared/config.yml
          tunnel: $TUNNEL_ID
          credentials-file: /home/runner/.cloudflared/$TUNNEL_ID.json
          
          ingress:
            - hostname: "$HOSTNAME"
              service: tcp://localhost:5900
            - service: http_status:404
          EOL

          cloudflared tunnel route dns --overwrite-dns "$TUNNEL_NAME" "$HOSTNAME"

      # 13. Start Cloudflared
      - name: Start Cloudflared
        run: |
          nohup cloudflared tunnel --config ~/.cloudflared/config.yml run "github-actions-tunnel" &
          sleep 10

      # 14. Keep the container running
      - name: Keep Service Running
        run: |
          echo "Workflow complete; keeping container alive..."
          while true; do sleep 1000; done
