name: Setup and Automate Browser Operations

on:
  push:
    branches:
      - main

jobs:
  setup-and-launch:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. Install System Dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            x11vnc \
            xvfb \
            unzip \
            curl \
            wget \
            gnupg \
            libxss1 \
            libnss3 \
            libgbm-dev \
            libasound2

      # 4. Install Python Packages and Playwright
      - name: Install Python Packages
        run: |
          python -m pip install --upgrade pip
          pip install pytest-playwright pyotp requests Pillow
          playwright install chromium
          playwright install-deps

      # 5. Install Cloudflared
      - name: Install Cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      # 6. Set up Cloudflare credentials
      - name: Setup Cloudflare Credentials
        run: |
          mkdir -p ~/.cloudflared
          echo "${{ secrets.CLOUDFLARE_CERT_PEM }}" > ~/.cloudflared/cert.pem
          chmod 600 ~/.cloudflared/cert.pem

      # 7. Start Xvfb and x11vnc
      - name: Start Virtual Display and VNC
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 &
          x11vnc -display :99 -N -forever -shared &
          sleep 5

      # 8. Extract Cookies.zip
      - name: Extract Cookies.zip
        env:
          BRAVE_ZIP_PASSWORD: ${{ secrets.BRAVE_ZIP_PASSWORD }}
        run: |
          mkdir -p ~/.config/microsoft-edge/Default
          unzip -P "$BRAVE_ZIP_PASSWORD" Cookies.zip -d ~/.config/microsoft-edge/Default

      # 9. Serve userscript Locally
      - name: Serve Userscript Locally
        env:
          USER_JS: ${{ secrets.USER_JS }}
        run: |
          echo "$USER_JS" > main.user.js
          python3 -m http.server 8000 &
          sleep 2
          curl -f http://localhost:8000/main.user.js || exit 1

      # 10. Install Userscript and Navigate to Luna
      - name: Install Userscript and Navigate to Luna
        env:
          DISPLAY: :99
        run: |
          cat <<EOF > automation.py
          import time
          from playwright.sync_api import sync_playwright, TimeoutError

          def wait_for_violentmonkey(context):
              print("Waiting for Violentmonkey to be installed...")
              violentmonkey_id = "jinjaccalgkegednnccohejagnlnfdag"
              
              while True:
                  try:
                      test_page = context.new_page()
                      response = test_page.goto(f"chrome-extension://{violentmonkey_id}/options/index.html", timeout=5000)
                      if response and response.ok:
                          print("✓ Violentmonkey is installed and ready")
                          test_page.close()
                          return True
                  except Exception:
                      print("⟳ Waiting for Violentmonkey to be installed...")
                      time.sleep(5)
                  finally:
                      try:
                          test_page.close()
                      except:
                          pass

          def install_userscript(context):
              print("\n=== Starting Userscript Installation ===")
              
              # Wait indefinitely for Violentmonkey
              wait_for_violentmonkey(context)
              
              # Create a new page for script installation
              page = context.new_page()
              
              while True:
                  try:
                      # Visit the userscript URL
                      print("Loading main.user.js...")
                      page.goto("http://localhost:8000/main.user.js")
                      
                      # Wait for the Violentmonkey confirmation page
                      print("Waiting for Violentmonkey confirmation page...")
                      if page.url.startswith("chrome-extension://jinjaccalgkegednnccohejagnlnfdag/confirm/"):
                          print("✓ Violentmonkey confirmation page detected")
                          
                          # Click the Install button
                          install_button = page.locator('button#confirm[data-hotkey="⌘Enter"]')
                          install_button.click()
                          print("✓ Clicked Install button")
                          
                          # Wait 1 second and click Close button
                          time.sleep(1)
                          close_button = page.get_by_role("button", name="Close")
                          close_button.click()
                          print("✓ Clicked Close button")
                          
                          page.close()
                          return True
                          
                      time.sleep(1)
                  except Exception as e:
                      print(f"Retrying due to error: {str(e)}")
                      time.sleep(1)

          def main():
              with sync_playwright() as p:
                  # Launch browser with persistent context
                  context = p.chromium.launch_persistent_context(
                      user_data_dir="/tmp/edge-data",
                      channel="msedge",
                      headless=False,
                      args=[
                          "--no-sandbox",
                          "--disable-dev-shm-usage",
                          "--start-maximized",
                          "--disable-features=ExtensionsToolbarMenu",
                          "--no-default-browser-check",
                          "--no-first-run",
                          "--disable-extensions-http-throttling"
                      ],
                      viewport={"width": 1920, "height": 1080}
                  )

                  try:
                      # Install the userscript
                      if install_userscript(context):
                          print("\n✓ Userscript installation successful")
                          
                          # Navigate to Luna
                          print("\nNavigating to Luna...")
                          page = context.new_page()
                          page.goto("https://luna.amazon.de")
                          print("✓ Navigation complete - userscript will handle the rest")
                      
                  except Exception as e:
                      print(f"\n✗ Automation failed: {e}")
                      raise
                  finally:
                      # Keep the context open for the userscript to work
                      pass

          if __name__ == "__main__":
              main()
          EOF

          python3 automation.py

      # 11. Launch Edge for VNC Access
      - name: Launch Edge Browser
        env:
          DISPLAY: :99
        run: |
          microsoft-edge \
            --no-sandbox \
            --user-data-dir=/tmp/edge-data \
            --disable-features=ExtensionsToolbarMenu \
            --disable-extensions-http-throttling \
            --disable-popup-blocking \
            --no-default-browser-check \
            --no-first-run \
            "${{ secrets.SECRET_URL }}" &
          
          sleep 5

      # 12. Manage Cloudflared Tunnel
      - name: Manage Cloudflared Tunnel
        run: |
          TUNNEL_NAME="github-actions-tunnel"
          HOSTNAME="${{ secrets.VNC_HOSTNAME }}"

          EXISTING_TUNNEL=$(cloudflared tunnel list | grep "$TUNNEL_NAME" || true)
          if [ -n "$EXISTING_TUNNEL" ]; then
            TUNNEL_ID=$(echo "$EXISTING_TUNNEL" | awk '{print $1}')
            echo "Existing tunnel: $TUNNEL_ID. Deleting..."
            cloudflared tunnel delete "$TUNNEL_ID"
          fi

          cloudflared tunnel create "$TUNNEL_NAME"
          TUNNEL_ID=$(cloudflared tunnel list | grep "$TUNNEL_NAME" | awk '{print $1}')

          mkdir -p ~/.cloudflared
          cat <<EOL > ~/.cloudflared/config.yml
          tunnel: $TUNNEL_ID
          credentials-file: /home/runner/.cloudflared/$TUNNEL_ID.json
          
          ingress:
            - hostname: "$HOSTNAME"
              service: tcp://localhost:5900
            - service: http_status:404
          EOL

          cloudflared tunnel route dns --overwrite-dns "$TUNNEL_NAME" "$HOSTNAME"

      # 13. Start Cloudflared
      - name: Start Cloudflared
        run: |
          nohup cloudflared tunnel --config ~/.cloudflared/config.yml run "github-actions-tunnel" &
          sleep 10

      # 14. Keep the container running
      - name: Keep Service Running
        run: |
          echo "Workflow complete; keeping container alive..."
          while true; do sleep 1000; done
