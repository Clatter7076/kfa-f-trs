name: Setup and Automate Browser Operations

on:
  push:
    branches:
      - main

jobs:
  setup-and-launch:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      # 1. Check out repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. Install System Dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            x11vnc \
            xvfb \
            unzip \
            curl \
            wget \
            gnupg \
            libxss1 \
            libnss3 \
            libgbm-dev \
            libasound2

      # 4. Install Python Packages and Playwright
      - name: Install Python Packages
        run: |
          python -m pip install --upgrade pip
          pip install pytest-playwright pyotp
          playwright install chromium
          playwright install-deps

      # 5. Install Cloudflared
      - name: Install Cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      # 6. Set up Cloudflare credentials
      - name: Setup Cloudflare Credentials
        run: |
          mkdir -p ~/.cloudflared
          echo "${{ secrets.CLOUDFLARE_CERT_PEM }}" > ~/.cloudflared/cert.pem
          chmod 600 ~/.cloudflared/cert.pem

      # 7. Start Xvfb and x11vnc
      - name: Start Virtual Display and VNC
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 &
          x11vnc -display :99 -N -forever -shared &
          sleep 5

      # 8. Download Violentmonkey Extension
      - name: Download Violentmonkey
        run: |
          mkdir -p /tmp/extensions
          wget -O /tmp/extensions/violentmonkey.crx \
            "https://clients2.google.com/service/update2/crx?response=redirect&acceptformat=crx2,crx3&prodversion=100&x=id%3Djinjaccalgkegednnccohejagnlnfdag%26installsource%3Dondemand%26uc"
          # Extract the CRX to a folder (required by Playwright)
          cd /tmp/extensions && python ${{ github.workspace }}/uncrx.py violentmonkey.crx

      # 9. Serve user.js Locally
      - name: Serve user.js Locally
        run: |
          USER_JS=${{ secrets.USER_JS }}
          cat <<EOF > user.js
          $USER_JS
          EOF

          nohup python3 -m http.server 8000 &

      # 10. Automate with Playwright
      - name: Install user.js via Violentmonkey
        run: |
          export DISPLAY=:99
          cat <<EOF > automate_browser.py
          import time
          import pyotp
          from playwright.sync_api import sync_playwright
          
          def main():
              secret_url = "${{ secrets.SECRET_URL }}"
              amazon_email = "${{ secrets.AMAZON_EMAIL }}"
              amazon_password = "${{ secrets.AMAZON_PASSWORD }}"
              amazon_totp_secret = "${{ secrets.AMAZON_TOTP_SECRET }}"
          
              with sync_playwright() as p:
                  # Launch Chromium with Violentmonkey extension
                  context = p.chromium.launch_persistent_context(
                      user_data_dir="/tmp/chrome-data",
                      headless=False,
                      args=[
                          "--no-sandbox",
                          "--start-maximized",
                          "--disable-dev-shm-usage",
                          f"--load-extension=/tmp/extensions"
                      ],
                      viewport={"width": 1920, "height": 1080}
                  )
                  
                  page = context.new_page()
                  
                  # 1) Navigate to secret URL
                  page.goto(secret_url)
          
                  # 2) Amazon login
                  page.wait_for_selector("#ap_email")
                  page.fill("#ap_email", amazon_email)
                  page.press("#ap_email", "Enter")
          
                  page.wait_for_selector("#ap_password")
                  page.fill("#ap_password", amazon_password)
                  page.press("#ap_password", "Enter")
          
                  # 3) TOTP/2FA
                  totp = pyotp.TOTP(amazon_totp_secret)
                  code = totp.now()
                  page.wait_for_selector("#auth-mfa-otpcode")
                  page.fill("#auth-mfa-otpcode", code)
                  page.press("#auth-mfa-otpcode", "Enter")
          
                  # 4) Open user.js in new tab to install script
                  install_page = context.new_page()
                  install_page.goto("http://localhost:8000/user.js")
                  # Wait for Violentmonkey "Install" button
                  install_button = install_page.wait_for_selector("xpath=//button[contains(text(), 'Install')]")
                  install_button.click()
                  time.sleep(2)
                  install_page.close()
          
                  # 5) Refresh main page
                  page.bring_to_front()
                  page.reload()
                  time.sleep(3)
          
                  print("User.js installed successfully via Violentmonkey.")
                  context.close()
          
          if __name__ == "__main__":
              main()
          EOF

          python3 automate_browser.py

      # 11. Launch Regular Browser Session with Extensions
      - name: Launch Browser
        run: |
          export DISPLAY=:99
          chromium \
            --no-sandbox \
            --load-extension=/tmp/extensions \
            "${{ secrets.SECRET_URL }}" &

      # 11. Manage Cloudflared Tunnel
      - name: Manage Cloudflared Tunnel
        run: |
          TUNNEL_NAME="github-actions-tunnel"
          HOSTNAME="${{ secrets.VNC_HOSTNAME }}"

          EXISTING_TUNNEL=$(cloudflared tunnel list | grep "$TUNNEL_NAME" || true)
          if [ -n "$EXISTING_TUNNEL" ]; then
            TUNNEL_ID=$(echo "$EXISTING_TUNNEL" | awk '{print $1}')
            echo "Existing tunnel: $TUNNEL_ID. Deleting..."
            cloudflared tunnel delete "$TUNNEL_ID"
          fi

          # Create new Cloudflare tunnel
          cloudflared tunnel create "$TUNNEL_NAME"
          TUNNEL_ID=$(cloudflared tunnel list | grep "$TUNNEL_NAME" | awk '{print $1}')

          mkdir -p ~/.cloudflared
          cat <<EOL > ~/.cloudflared/config.yml
          tunnel: $TUNNEL_ID
          credentials-file: /home/runner/.cloudflared/$TUNNEL_ID.json
          
          ingress:
            - hostname: "$HOSTNAME"
              service: tcp://localhost:5900
            - service: http_status:404
          EOL

          cloudflared tunnel route dns --overwrite-dns "$TUNNEL_NAME" "$HOSTNAME"

      # 12. Start Cloudflared
      - name: Start Cloudflared
        run: |
          nohup cloudflared tunnel --config ~/.cloudflared/config.yml run "github-actions-tunnel" &
          sleep 10

      # 13. Keep the container running
      - name: Keep Service Running
        run: |
          echo "Workflow complete; keeping container alive..."
          while true; do sleep 1000; done
