name: Setup and Automate Browser Operations

on:
  push:
    branches:
      - main  # Trigger the workflow on pushes to the main branch

jobs:
  setup-and-launch:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Set a timeout for the job to prevent indefinite runs

    steps:
      # Step 1: Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set Up Python Environment
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install System Dependencies
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            x11vnc \
            xvfb \
            unzip \
            curl \
            wget \
            gnupg \
            libxss1 \
            libappindicator3-1 \
            libindicator7

      # Step 4: Install Brave Browser
      - name: Install Brave Browser
        run: |
          # Add Brave's GPG key
          sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg

          # Add Brave's repository
          echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser-release.list

          # Update package lists and install Brave browser
          sudo apt-get update
          sudo apt-get install -y brave-browser

      # Step 5: Install Python Packages
      - name: Install Python Packages
        run: |
          python -m pip install --upgrade pip
          pip install selenium pyotp

      # Step 6: Install Cloudflared
      - name: Install Cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      # Step 7: Setup Cloudflare Credentials
      - name: Setup Cloudflare Credentials
        run: |
          mkdir -p ~/.cloudflared
          echo "${{ secrets.CLOUDFLARE_CERT_PEM }}" > ~/.cloudflared/cert.pem
          chmod 600 ~/.cloudflared/cert.pem

      # Step 8: Start Virtual Display and VNC Server (for manual or external VNC connection)
      - name: Start Virtual Display and VNC Server
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 &
          x11vnc -display :99 -N -forever -shared &

      # Step 9: Configure Brave Browser Policies
      - name: Configure Brave Browser Policies
        run: |
          sudo mkdir -p /etc/brave/policies/managed
          sudo tee /etc/brave/policies/managed/GroupPolicy.json > /dev/null <<EOL
          {
            "ExtensionSettings": {
              "*": {
                "installation_mode": "blocked"
              },
              "cjpalhdlnbpafiamejdnhcphjbkeiagm": {
                "installation_mode": "force_installed",
                "update_url": "https://clients2.google.com/service/update2/crx"
              },
              "jinjaccalgkegednnccohejagnlnfdag": {
                "installation_mode": "force_installed",
                "update_url": "https://clients2.google.com/service/update2/crx"
              }
            },
            "TorDisabled": true,
            "BraveVPNDisabled": true,
            "BraveRewardsDisabled": true,
            "BraveWalletDisabled": true,
            "MetricsReportingEnabled": false,
            "DefaultBrowserSettingEnabled": false,
            "HomepageIsNewTabPage": true,
            "NewTabPageLocation": "about:blank"
          }
          EOL

      # Step 10: Serve user.js Locally
      - name: Serve user.js Locally
        run: |
          echo "${{ secrets.USER_JS }}" > user.js
          nohup python3 -m http.server 8000 &

      # Step 11: Launch Brave to Hostname
      - name: Launch Brave Browser
        run: |
          export DISPLAY=:99
          nohup brave-browser --start-fullscreen --no-sandbox "${{ secrets.SECRET_URL }}" &

      # Step 12: Automate Login, Install user.js, and Reload
      - name: Run Automation
        run: |
          cat <<'EOF' > automate_brave.py
          import time
          import pyotp
          from selenium import webdriver
          from selenium.webdriver.common.by import By
          from selenium.webdriver.common.keys import Keys
          from selenium.webdriver.support.ui import WebDriverWait
          from selenium.webdriver.support import expected_conditions as EC

          # Configure Selenium to use the same Brave instance visible over VNC
          options = webdriver.ChromeOptions()
          options.binary_location = "/usr/bin/brave-browser"
          options.add_argument("--no-sandbox")
          options.add_argument("--disable-dev-shm-usage")
          options.add_argument("--disable-gpu")
          options.add_argument("--remote-debugging-port=9222")
          # Note: We do NOT use headless here to allow visual debugging via VNC
          # If you prefer headless, uncomment the next line
          # options.add_argument("--headless")

          # Initialize the WebDriver
          driver = webdriver.Chrome(options=options)

          wait = WebDriverWait(driver, 30)
          try:
              # 1. Wait for the Brave browser to open the secrets.SECRET_URL page
              #    (which is secretly your "hostname: luna.amazon.de/game/fortnite")
              driver.get("${{ secrets.SECRET_URL }}")

              # 2. Automate Amazon Login
              #    Wait for and fill in email
              email_field = wait.until(
                  EC.presence_of_element_located((By.ID, "ap_email"))
              )
              email_field.send_keys("${{ secrets.AMAZON_EMAIL }}")
              email_field.send_keys(Keys.RETURN)

              #    Wait for and fill in password
              password_field = wait.until(
                  EC.presence_of_element_located((By.ID, "ap_password"))
              )
              password_field.send_keys("${{ secrets.AMAZON_PASSWORD }}")
              password_field.send_keys(Keys.RETURN)

              # 3. Handle TOTP if needed
              totp = pyotp.TOTP("${{ secrets.AMAZON_TOTP_SECRET }}")
              otp_code = totp.now()

              otp_field = wait.until(
                  EC.presence_of_element_located((By.ID, "auth-mfa-otpcode"))
              )
              otp_field.send_keys(otp_code)
              otp_field.send_keys(Keys.RETURN)

              # 4. After login complete, open the local user.js to trigger Violentmonkey installation
              driver.execute_script("window.open('http://localhost:8000/user.js','_blank');")
              time.sleep(2)

              # Switch to the new tab
              driver.switch_to.window(driver.window_handles[-1])

              # 5. Confirm installation in Violentmonkey
              install_btn = wait.until(
                  EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Install')]"))
              )
              install_btn.click()
              time.sleep(3)

              # 6. Close the Violentmonkey tab
              driver.close()

              # 7. Switch back to the original tab
              driver.switch_to.window(driver.window_handles[0])

              # 8. Reload the original page to activate the user script
              driver.refresh()
              print("Installation complete, user script active.")

              # Keep the session alive so we can see it in VNC
              while True:
                  time.sleep(3600)

          except Exception as e:
              print(f"[Error] {e}")
              driver.quit()
          EOF

          python3 automate_brave.py &

      # Step 13: Manage Cloudflare Tunnel
      - name: Manage Cloudflare Tunnel
        run: |
          # Define tunnel name and hostname from secrets
          TUNNEL_NAME="github-actions-tunnel"
          HOSTNAME="${{ secrets.VNC_HOSTNAME }}"

          # Check if the tunnel already exists
          EXISTING_TUNNEL=$(cloudflared tunnel list | grep "$TUNNEL_NAME" || true)
          if [ -n "$EXISTING_TUNNEL" ]; then
            TUNNEL_ID=$(echo "$EXISTING_TUNNEL" | awk '{print $1}')
            echo "Existing tunnel found with ID: $TUNNEL_ID. Deleting..."
            cloudflared tunnel delete "$TUNNEL_ID"
            echo "Tunnel deleted."
          fi

          # Create a new tunnel
          echo "Creating a new tunnel named $TUNNEL_NAME..."
          cloudflared tunnel create "$TUNNEL_NAME"
          TUNNEL_ID=$(cloudflared tunnel list | grep "$TUNNEL_NAME" | awk '{print $1}')
          echo "Tunnel created with ID: $TUNNEL_ID"

          # Generate config.yml
          mkdir -p ~/.cloudflared
          cat <<EOL > ~/.cloudflared/config.yml
          tunnel: $TUNNEL_ID
          credentials-file: /home/runner/.cloudflared/$TUNNEL_ID.json

          ingress:
            - hostname: "$HOSTNAME"
              service: tcp://localhost:5900
            - service: http_status:404
          EOL

          echo "Cloudflare tunnel configuration created."

          # Route the tunnel to the custom domain
          echo "Routing tunnel to the custom domain $HOSTNAME..."
          cloudflared tunnel route dns --overwrite-dns "$TUNNEL_NAME" "$HOSTNAME"
          echo "DNS record for $HOSTNAME created successfully."

      # Step 14: Start Cloudflared Tunnel
      - name: Start Cloudflared Tunnel
        run: |
          nohup cloudflared tunnel --config ~/.cloudflared/config.yml run "github-actions-tunnel" &
          sleep 10

      # Step 15: Keep Services Running
      - name: Keep Services Running
        run: |
          echo "Services are running. Keeping the job alive..."
          while true; do sleep 1000; done
