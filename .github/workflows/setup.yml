name: Setup and Automate Browser Operations

on:
  push:
    branches:
      - main

jobs:
  setup-and-launch:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      # 1. Check out repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. Install System Dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            x11vnc \
            xvfb \
            unzip \
            curl \
            wget \
            gnupg \
            libxss1 \
            libnss3 \
            libgbm-dev \
            libasound2

      # 4. Install Python Packages and Playwright
      - name: Install Python Packages
        run: |
          python -m pip install --upgrade pip
          pip install pytest-playwright pyotp amazoncaptcha requests Pillow
          playwright install chromium
          playwright install-deps

      # 5. Install Cloudflared
      - name: Install Cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      # 6. Set up Cloudflare credentials
      - name: Setup Cloudflare Credentials
        run: |
          mkdir -p ~/.cloudflared
          echo "${{ secrets.CLOUDFLARE_CERT_PEM }}" > ~/.cloudflared/cert.pem
          chmod 600 ~/.cloudflared/cert.pem

      # 7. Start Xvfb and x11vnc
      - name: Start Virtual Display and VNC
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 &
          x11vnc -display :99 -N -forever -shared &
          sleep 5

      # 8. Download Violentmonkey Extension
      - name: Download Violentmonkey
        run: |
          mkdir -p /tmp/extensions
          wget -O /tmp/extensions/violentmonkey.crx \
            "https://clients2.google.com/service/update2/crx?response=redirect&acceptformat=crx2,crx3&prodversion=100&x=id%3Djinjaccalgkegednnccohejagnlnfdag%26installsource%3Dondemand%26uc"
          # Extract the CRX to a folder (required by Playwright)
          cd /tmp/extensions && python ${{ github.workspace }}/uncrx.py violentmonkey.crx

      # 9. Serve user.js Locally
      - name: Serve user.js Locally
        env:
          USER_JS: ${{ secrets.USER_JS }}
        run: |
          echo "$USER_JS" > user.js
          nohup python3 -m http.server 8000 &

      # 10. Automate with Playwright
      - name: Install user.js via Violentmonkey
        run: |
          export DISPLAY=:99
          cat <<EOF > automate_browser.py
          import time
          import pyotp
          from playwright.sync_api import sync_playwright
          from amazoncaptcha import AmazonCaptcha

          def check_password_error(page):
              error_box = page.locator('#auth-error-message-box')
              if error_box.is_visible():
                  error_text = error_box.inner_text()
                  if "Falsches Passwort" in error_text:
                      print("Error: Wrong password. Please check your credentials.")
                      sys.exit(1)
          
          def solve_cvf_captcha(page):
              if not page.url.startswith('https://www.amazon.de/ap/cvf'):
                  return False
                  
              try:
                  # Wait for the specific captcha image element
                  captcha_element = page.wait_for_selector('#auth-captcha-image')
                  if not captcha_element:
                      print("Captcha element not found")
                      return False
                      
                  # Get the src attribute of the captcha image
                  captcha_url = captcha_element.get_attribute('src')
                  print(f"Found captcha URL: {captcha_url}")
                  
                  if not captcha_url:
                      print("Could not get captcha URL")
                      return False
                  
                  # Solve captcha using the extracted URL
                  captcha = AmazonCaptcha.fromlink(captcha_url)
                  solution = captcha.solve()
                  
                  if solution:
                      print(f"Captcha solved: {solution}")
                      # Input the solution
                      page.fill('#captchacharacters', solution)
                      page.click('button[type="submit"]')
                      print("Submitted captcha solution")
                      return True
                  else:
                      print("Failed to solve captcha")
                      return False
                      
              except Exception as e:
                  print(f"Error during captcha solving: {e}")
                  # Print the page content for debugging
                  print("Page content:")
                  print(page.content())
                  return False
          
          def main():
              secret_url = "${{ secrets.SECRET_URL }}"
              amazon_email = "${{ secrets.AMAZON_EMAIL }}"
              amazon_password = "${{ secrets.AMAZON_PASSWORD }}"
              amazon_totp_secret = "${{ secrets.AMAZON_TOTP_SECRET }}"
          
              with sync_playwright() as p:
                  context = p.chromium.launch_persistent_context(
                      user_data_dir="/tmp/chrome-data",
                      headless=False,
                      args=[
                          "--no-sandbox",
                          "--start-maximized",
                          "--disable-dev-shm-usage",
                          f"--load-extension=/tmp/extensions"
                      ],
                      viewport={"width": 1920, "height": 1080}
                  )
                  
                  page = context.new_page()
                  
                  # 1) Navigate to secret URL
                  page.goto(secret_url)
          
                  # 2) Click the sign-in button
                  page.wait_for_selector("#item_secondary_nav_button_sign_in")
                  page.click("#item_secondary_nav_button_sign_in")
          
                  # 3) Enter email
                  page.wait_for_selector("#ap_email")
                  page.fill("#ap_email", amazon_email)
                  page.press("#ap_email", "Enter")
          
                  # 4) Enter password
                  page.wait_for_selector("#ap_password")
                  page.fill("#ap_password", amazon_password)
                  page.press("#ap_password", "Enter")
                  
                  # Wait a moment for any error messages
                  time.sleep(2)
                  
                  # Check for password error
                  check_password_error(page)
                  
                  # 5) Check for CVF/Captcha page
                  time.sleep(3)  # Wait for potential redirect
                  
                  if page.url.startswith('https://www.amazon.de/ap/cvf'):
                      print("Detected captcha page")
                      print(f"Current URL: {page.url}")
                      
                      max_attempts = 3
                      for attempt in range(max_attempts):
                          print(f"Captcha solving attempt {attempt + 1}/{max_attempts}")
                          if solve_cvf_captcha(page):
                              print("Captcha solved successfully")
                              time.sleep(3)  # Wait for submission processing
                              break
                          time.sleep(2)  # Wait between attempts
          
                  # 6) Handle 2FA
                  page.wait_for_selector("#auth-mfa-otpcode", timeout=60000)  # Increased timeout
                  totp = pyotp.TOTP(amazon_totp_secret)
                  code = totp.now()
                  page.fill("#auth-mfa-otpcode", code)
                  page.press("#auth-mfa-otpcode", "Enter")
          
                  # 7) Open user.js in new tab to install script
                  install_page = context.new_page()
                  install_page.goto("http://localhost:8000/user.js")
                  install_button = install_page.wait_for_selector("xpath=//button[contains(text(), 'Install')]")
                  install_button.click()
                  time.sleep(2)
                  install_page.close()
          
                  # 8) Refresh main page
                  page.bring_to_front()
                  page.reload()
                  time.sleep(3)
          
                  print("User.js installed successfully via Violentmonkey.")
                  context.close()
          
          if __name__ == "__main__":
              main()
          EOF

          python3 automate_browser.py

      # 11. Launch Regular Browser Session with Extensions
      - name: Launch Browser
        run: |
          export DISPLAY=:99
          chromium \
            --no-sandbox \
            --load-extension=/tmp/extensions \
            "${{ secrets.SECRET_URL }}" &

      # 11. Manage Cloudflared Tunnel
      - name: Manage Cloudflared Tunnel
        run: |
          TUNNEL_NAME="github-actions-tunnel"
          HOSTNAME="${{ secrets.VNC_HOSTNAME }}"

          EXISTING_TUNNEL=$(cloudflared tunnel list | grep "$TUNNEL_NAME" || true)
          if [ -n "$EXISTING_TUNNEL" ]; then
            TUNNEL_ID=$(echo "$EXISTING_TUNNEL" | awk '{print $1}')
            echo "Existing tunnel: $TUNNEL_ID. Deleting..."
            cloudflared tunnel delete "$TUNNEL_ID"
          fi

          # Create new Cloudflare tunnel
          cloudflared tunnel create "$TUNNEL_NAME"
          TUNNEL_ID=$(cloudflared tunnel list | grep "$TUNNEL_NAME" | awk '{print $1}')

          mkdir -p ~/.cloudflared
          cat <<EOL > ~/.cloudflared/config.yml
          tunnel: $TUNNEL_ID
          credentials-file: /home/runner/.cloudflared/$TUNNEL_ID.json
          
          ingress:
            - hostname: "$HOSTNAME"
              service: tcp://localhost:5900
            - service: http_status:404
          EOL

          cloudflared tunnel route dns --overwrite-dns "$TUNNEL_NAME" "$HOSTNAME"

      # 12. Start Cloudflared
      - name: Start Cloudflared
        run: |
          nohup cloudflared tunnel --config ~/.cloudflared/config.yml run "github-actions-tunnel" &
          sleep 10

      # 13. Keep the container running
      - name: Keep Service Running
        run: |
          echo "Workflow complete; keeping container alive..."
          while true; do sleep 1000; done
