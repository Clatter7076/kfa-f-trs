name: Setup and Automate Browser Operations

on:
  push:
    branches:
      - main

jobs:
  setup-and-launch:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. Install System Dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            x11vnc \
            xvfb \
            unzip \
            curl \
            wget \
            gnupg \
            libxss1 \
            libnss3 \
            libgbm-dev \
            libasound2

      # 4. Install Python Packages and Playwright
      - name: Install Python Packages
        run: |
          python -m pip install --upgrade pip
          pip install pytest-playwright pyotp requests Pillow
          playwright install chromium
          playwright install-deps

      # 5. Install Cloudflared
      - name: Install Cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      # 6. Set up Cloudflare credentials
      - name: Setup Cloudflare Credentials
        run: |
          mkdir -p ~/.cloudflared
          echo "${{ secrets.CLOUDFLARE_CERT_PEM }}" > ~/.cloudflared/cert.pem
          chmod 600 ~/.cloudflared/cert.pem

      # 7. Start Xvfb and x11vnc
      - name: Start Virtual Display and VNC
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 &
          x11vnc -display :99 -N -forever -shared &
          sleep 5

      # 8. Extract Cookies.zip
      - name: Extract Cookies.zip
        env:
          BRAVE_ZIP_PASSWORD: ${{ secrets.BRAVE_ZIP_PASSWORD }}
        run: |
          mkdir -p ~/.config/microsoft-edge/Default
          7z x Cookies.zip -o~/.config/microsoft-edge/Default -p"$BRAVE_ZIP_PASSWORD"

      # 9. Serve userscript Locally
      - name: Serve Userscript Locally
        env:
          USER_JS: ${{ secrets.USER_JS }}
        run: |
          echo "$USER_JS" > main.user.js
          python3 -m http.server 8000 &
          sleep 2
          curl -f http://localhost:8000/main.user.js || exit 1

      # 10. Install Userscript and Navigate to Luna
      - name: Install Userscript and Navigate to Luna
        env:
          DISPLAY: :99
        run: |
          echo "[$(date -u '+%Y-%m-%d %H:%M:%S UTC')] Starting automation script creation..."
          
          cat <<'EOF' > automation.py
          import time
          from datetime import datetime
          from playwright.sync_api import sync_playwright, TimeoutError

          def log_debug(message):
              timestamp = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')
              print(f"[{timestamp}] {message}")

          def check_extensions(context):
              log_debug("Checking Edge extensions...")
              try:
                  page = context.new_page()
                  page.goto("edge://extensions", timeout=10000)
                  time.sleep(5)  # Give time for extensions page to load
                  content = page.content()
                  page.close()
                  
                  if "Violentmonkey" in content:
                      log_debug("Found Violentmonkey in extensions list")
                      return True
                  log_debug("Violentmonkey not found in extensions list")
                  return False
              except Exception as e:
                  log_debug(f"Error checking extensions: {e}")
                  return False

          def wait_for_violentmonkey(context, max_wait_time=600):  # 10 minutes timeout
              log_debug("Waiting for Violentmonkey to be installed...")
              violentmonkey_id = "jinjaccalgkegednnccohejagnlnfdag"
              start_time = time.time()
              
              while time.time() - start_time < max_wait_time:
                  try:
                      # First check extensions page
                      if check_extensions(context):
                          # Try to access Violentmonkey directly
                          test_page = context.new_page()
                          try:
                              log_debug("Attempting to access Violentmonkey...")
                              test_urls = [
                                  f"chrome-extension://{violentmonkey_id}/options.html",
                                  f"chrome-extension://{violentmonkey_id}/popup.html",
                                  f"chrome-extension://{violentmonkey_id}/confirm/index.html"
                              ]
                              
                              for url in test_urls:
                                  response = test_page.goto(url, timeout=5000)
                                  if response and response.ok:
                                      log_debug(f"✓ Successfully accessed Violentmonkey at {url}")
                                      test_page.close()
                                      return True
                          except Exception as e:
                              log_debug(f"Error accessing Violentmonkey URLs: {e}")
                          finally:
                              test_page.close()
                      
                      elapsed = int(time.time() - start_time)
                      log_debug(f"⟳ Still waiting for Violentmonkey... ({elapsed}s/{max_wait_time}s)")
                      
                      # Trigger extension check periodically
                      if elapsed % 30 == 0:  # Every 30 seconds
                          trigger_page = context.new_page()
                          trigger_page.goto("edge://extensions")
                          time.sleep(2)
                          trigger_page.reload()
                          trigger_page.close()
                      
                      time.sleep(5)
                  except Exception as e:
                      log_debug(f"Error in wait loop: {e}")
                      time.sleep(5)
              
              raise TimeoutError("Violentmonkey installation check timed out after 10 minutes")

          def install_userscript(context, max_wait_time=300):
              log_debug("=== Starting Userscript Installation ===")
              start_time = time.time()
              
              # Wait for Violentmonkey
              wait_for_violentmonkey(context)
              
              # Create a new page for script installation
              page = context.new_page()
              
              while time.time() - start_time < max_wait_time:
                  try:
                      log_debug("Loading main.user.js...")
                      page.goto("http://localhost:8000/main.user.js", timeout=10000)
                      
                      log_debug(f"Current URL: {page.url}")
                      
                      # Wait for any of the possible confirmation URLs
                      if "jinjaccalgkegednnccohejagnlnfdag/confirm" in page.url:
                          log_debug("✓ Violentmonkey confirmation page detected")
                          
                          # Try different button selectors
                          selectors = [
                              'button#confirm[data-hotkey="⌘Enter"]',
                              'button#confirm',
                              'button:has-text("Install")'
                          ]
                          
                          for selector in selectors:
                              try:
                                  log_debug(f"Trying to find install button with selector: {selector}")
                                  install_button = page.wait_for_selector(selector, timeout=5000)
                                  if install_button:
                                      install_button.click()
                                      log_debug("✓ Clicked Install button")
                                      break
                              except Exception as e:
                                  log_debug(f"Selector {selector} failed: {e}")
                          
                          # Wait 1 second and click Close button
                          time.sleep(1)
                          
                          close_selectors = [
                              'button:has-text("Close")',
                              'button:has-text("确定")',  # Chinese
                              'button[role="button"]:has-text("Close")'
                          ]
                          
                          for selector in close_selectors:
                              try:
                                  log_debug(f"Trying to find close button with selector: {selector}")
                                  close_button = page.wait_for_selector(selector, timeout=5000)
                                  if close_button:
                                      close_button.click()
                                      log_debug("✓ Clicked Close button")
                                      break
                              except Exception as e:
                                  log_debug(f"Close button selector {selector} failed: {e}")
                          
                          page.close()
                          return True
                      
                      elapsed = int(time.time() - start_time)
                      log_debug(f"Waiting for confirmation page... ({elapsed}s/{max_wait_time}s)")
                      time.sleep(1)
                  except Exception as e:
                      log_debug(f"Error during installation: {str(e)}")
                      time.sleep(1)
              
              raise TimeoutError("Userscript installation timed out after 5 minutes")

          def main():
              log_debug("Starting main automation process")
              
              with sync_playwright() as p:
                  log_debug("Launching browser...")
                  try:
                      context = p.chromium.launch_persistent_context(
                          user_data_dir="/tmp/edge-data",
                          channel="msedge",
                          headless=False,
                          args=[
                              "--no-sandbox",
                              "--disable-dev-shm-usage",
                              "--start-maximized",
                              "--disable-features=ExtensionsToolbarMenu",
                              "--no-default-browser-check",
                              "--no-first-run",
                              "--disable-extensions-http-throttling"
                          ],
                          viewport={"width": 1920, "height": 1080},
                          timeout=30000
                      )
                      log_debug("Browser launched successfully")

                      if install_userscript(context):
                          log_debug("✓ Userscript installation successful")
                          
                          log_debug("Navigating to Luna...")
                          page = context.new_page()
                          page.goto("https://luna.amazon.de", timeout=30000)
                          log_debug("✓ Navigation complete - userscript will handle the rest")
                      
                  except Exception as e:
                      log_debug(f"✗ Automation failed: {e}")
                      raise
                  finally:
                      log_debug("Automation script completed")
                      pass

          if __name__ == "__main__":
              log_debug("Script started")
              main()
          EOF

          echo "[$(date -u '+%Y-%m-%d %H:%M:%S UTC')] Automation script created, starting Python execution..."
          python3 automation.py

      # 11. Launch Edge for VNC Access
      - name: Launch Edge Browser
        env:
          DISPLAY: :99
        run: |
          microsoft-edge \
            --no-sandbox \
            --user-data-dir=/tmp/edge-data \
            --disable-features=ExtensionsToolbarMenu \
            --disable-extensions-http-throttling \
            --disable-popup-blocking \
            --no-default-browser-check \
            --no-first-run \
            "${{ secrets.SECRET_URL }}" &
          
          sleep 5

      # 12. Manage Cloudflared Tunnel
      - name: Manage Cloudflared Tunnel
        run: |
          TUNNEL_NAME="github-actions-tunnel"
          HOSTNAME="${{ secrets.VNC_HOSTNAME }}"

          EXISTING_TUNNEL=$(cloudflared tunnel list | grep "$TUNNEL_NAME" || true)
          if [ -n "$EXISTING_TUNNEL" ]; then
            TUNNEL_ID=$(echo "$EXISTING_TUNNEL" | awk '{print $1}')
            echo "Existing tunnel: $TUNNEL_ID. Deleting..."
            cloudflared tunnel delete "$TUNNEL_ID"
          fi

          cloudflared tunnel create "$TUNNEL_NAME"
          TUNNEL_ID=$(cloudflared tunnel list | grep "$TUNNEL_NAME" | awk '{print $1}')

          mkdir -p ~/.cloudflared
          cat <<EOL > ~/.cloudflared/config.yml
          tunnel: $TUNNEL_ID
          credentials-file: /home/runner/.cloudflared/$TUNNEL_ID.json
          
          ingress:
            - hostname: "$HOSTNAME"
              service: tcp://localhost:5900
            - service: http_status:404
          EOL

          cloudflared tunnel route dns --overwrite-dns "$TUNNEL_NAME" "$HOSTNAME"

      # 13. Start Cloudflared
      - name: Start Cloudflared
        run: |
          nohup cloudflared tunnel --config ~/.cloudflared/config.yml run "github-actions-tunnel" &
          sleep 10

      # 14. Keep the container running
      - name: Keep Service Running
        run: |
          echo "Workflow complete; keeping container alive..."
          while true; do sleep 1000; done
