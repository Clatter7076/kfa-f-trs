name: Setup and Automate Browser Operations

on:
  push:
    branches:
      - main

jobs:
  setup-and-launch:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      # 1. Check out repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. Install Dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            x11vnc \
            xvfb \
            unzip \
            curl \
            wget \
            gnupg \
            libxss1 \
            libappindicator3-1 \
            libindicator7 \
            libnss3 \
            libgbm-dev \
            libasound2


      - name: Install Matching ChromeDriver
        run: |
          CHROMEDRIVER_VERSION="131.0.6778.204"
          wget -O /tmp/chromedriver_linux64.zip "https://storage.googleapis.com/chrome-for-testing-public/${CHROMEDRIVER_VERSION}/linux64/chromedriver-linux64.zip"
          unzip /tmp/chromedriver_linux64.zip -d /tmp
          sudo mv -f /tmp/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
          sudo chmod +x /usr/local/bin/chromedriver

      # 4. Install Brave
      - name: Install Brave
        run: |
          sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg \
            https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg

          echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] \
            https://brave-browser-apt-release.s3.brave.com/ stable main" \
            | sudo tee /etc/apt/sources.list.d/brave-browser-release.list

          sudo apt-get update
          sudo apt-get install -y brave-browser

      # 5. Install Python Packages
      - name: Install Python Packages
        run: |
          python -m pip install --upgrade pip
          pip install selenium pyotp

      # 6. Install Cloudflared
      - name: Install Cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      # 7. Set up Cloudflare credentials
      - name: Setup Cloudflare Credentials
        run: |
          mkdir -p ~/.cloudflared
          echo "${{ secrets.CLOUDFLARE_CERT_PEM }}" > ~/.cloudflared/cert.pem
          chmod 600 ~/.cloudflared/cert.pem

      # 8. Start Xvfb and x11vnc
      - name: Start Virtual Display and VNC
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 &
          x11vnc -display :99 -N -forever -shared &
          sleep 5

      # 9. Serve user.js Locally
      - name: Serve user.js Locally
        run: |
          cat <<'EOF' > user.js
          {{ secrets.USER_JS }}
          EOF
          nohup python3 -m http.server 8000 &

      # 10. Automate with Selenium to Install user.js
      - name: Install user.js via Violentmonkey
        run: |
          export DISPLAY=:99
          cat <<'EOF' > automate_brave.py
          import time
          import pyotp
          from selenium import webdriver
          from selenium.webdriver.chrome.options import Options
          from selenium.webdriver.common.by import By
          from selenium.webdriver.common.keys import Keys
          from selenium.webdriver.support.ui import WebDriverWait
          from selenium.webdriver.support import expected_conditions as EC
          
          def main():
              # Configure ChromeOptions for Brave
              options = Options()
              options.binary_location = "/usr/bin/brave-browser"
          
              # Flags to help reduce crashes in GitHub Actions
              options.add_argument("--no-sandbox")
              options.add_argument("--disable-dev-shm-usage")
              options.add_argument("--disable-gpu")
              options.add_argument("--remote-debugging-port=9222")
              options.add_argument("--user-data-dir=/tmp/brave_user_data")
          
              driver = webdriver.Chrome(options=options)
              wait = WebDriverWait(driver, 30)
          
              try:
                  # 1) Navigate to a secret URL
                  driver.get("${{ secrets.SECRET_URL }}")
          
                  # 2) Log in with Amazon credentials
                  email_field = wait.until(EC.presence_of_element_located((By.ID, "ap_email")))
                  email_field.send_keys("${{ secrets.AMAZON_EMAIL }}")
                  email_field.send_keys(Keys.RETURN)
          
                  password_field = wait.until(EC.presence_of_element_located((By.ID, "ap_password")))
                  password_field.send_keys("${{ secrets.AMAZON_PASSWORD }}")
                  password_field.send_keys(Keys.RETURN)
          
                  # 3) TOTP/2FA
                  totp = pyotp.TOTP("${{ secrets.AMAZON_TOTP_SECRET }}")
                  code = totp.now()
                  otp_field = wait.until(EC.presence_of_element_located((By.ID, "auth-mfa-otpcode")))
                  otp_field.send_keys(code)
                  otp_field.send_keys(Keys.RETURN)
          
                  # 4) Open user.js in a new tab
                  driver.execute_script("window.open('http://localhost:8000/user.js','_blank');")
                  time.sleep(2)
                  driver.switch_to.window(driver.window_handles[-1])
          
                  # 5) Click "Install" in Violentmonkey
                  install_btn = wait.until(
                      EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Install')]"))
                  )
                  install_btn.click()
          
                  # Close the user.js tab
                  time.sleep(2)
                  driver.close()
          
                  # Switch back to the main tab
                  driver.switch_to.window(driver.window_handles[0])
          
                  # Reload to ensure user.js is active
                  driver.refresh()
                  time.sleep(3)
                  print("User.js installed successfully via Violentmonkey.")
              except Exception as ex:
                  print(f"[Error] {ex}")
              finally:
                  driver.quit()
          
          if __name__ == "__main__":
              main()
          EOF

          python3 automate_brave.py

      # 11. Launch Regular Brave (non-Selenium)
      - name: Launch Brave
        run: |
          export DISPLAY=:99
          nohup brave-browser --no-sandbox "${{ secrets.SECRET_URL }}" &

      # 12. Manage Cloudflared Tunnel
      - name: Manage Cloudflared Tunnel
        run: |
          TUNNEL_NAME="github-actions-tunnel"
          HOSTNAME="${{ secrets.VNC_HOSTNAME }}"

          EXISTING_TUNNEL=$(cloudflared tunnel list | grep "$TUNNEL_NAME" || true)
          if [ -n "$EXISTING_TUNNEL" ]; then
            TUNNEL_ID=$(echo "$EXISTING_TUNNEL" | awk '{print $1}')
            echo "Existing tunnel: $TUNNEL_ID. Deleting..."
            cloudflared tunnel delete "$TUNNEL_ID"
          fi

          # Create new Cloudflare tunnel
          cloudflared tunnel create "$TUNNEL_NAME"
          TUNNEL_ID=$(cloudflared tunnel list | grep "$TUNNEL_NAME" | awk '{print $1}')

          mkdir -p ~/.cloudflared
          cat <<EOL > ~/.cloudflared/config.yml
          tunnel: $TUNNEL_ID
          credentials-file: /home/runner/.cloudflared/$TUNNEL_ID.json
          
          ingress:
            - hostname: "$HOSTNAME"
              service: tcp://localhost:5900
            - service: http_status:404
          EOL

          cloudflared tunnel route dns --overwrite-dns "$TUNNEL_NAME" "$HOSTNAME"

      # 13. Start Cloudflared
      - name: Start Cloudflared
        run: |
          nohup cloudflared tunnel --config ~/.cloudflared/config.yml run "github-actions-tunnel" &
          sleep 10

      # 14. Keep the container running
      - name: Keep Service Running
        run: |
          echo "Workflow complete; keeping container alive..."
          while true; do sleep 1000; done
